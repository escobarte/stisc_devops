–ù–µ–º–Ω–æ–≥–æ —Ç–µ–æ—Ä–∏–∏:–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É CMD –∏ ENTRYPOINT
CMD —ç—Ç–æ —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª–Ω—è–µ–º—è –∫–æ–º–∞–Ω–¥–∞
ENTRYPOINT –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å CMD, —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ RUN.
^Docker Compose = –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –ø–æ–∑–≤–∞–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–∞ –∫–∞–∫ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å (app+db+cache)
üîπ Best practice –≤ DevOps:
–ò—Å–ø–æ–ª—å–∑—É–µ—à—å multistage build –≤ Dockerfile ‚Üí –ø–æ–ª—É—á–∞–µ—à—å —á–∏—Å—Ç—ã–π, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π production-–æ–±—Ä–∞–∑.
–í docker-compose.yml –ø–æ–¥–Ω–∏–º–∞–µ—à—å —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ + –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã.

üîç 3. –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–ª–∏—á–∏—è
Docker Multistage 										|			Build	Docker Compose
–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞				|			–£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Dockerfile 								|			–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ docker-compose.yml
–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å–±–æ—Ä–∫–µ					 				|			–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –¥–µ–ø–ª–æ–µ/—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
–ù–∞–ø—Ä–∏–º–µ—Ä: build -> production stage						|		 	–ù–∞–ø—Ä–∏–º–µ—Ä: app + db + redis

üî¥ Docker Multistage ‚Äì –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞.
üîµ Docker Compose ‚Äì –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤.




üê≥ Docker on 93.6
–ó–∞–¥–∞—á–∞: –°–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–≤–µ—Ä–Ω–µ—Ç –Ω–∞ Laravel –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –Ω–∞ –≤–Ω–µ—à–Ω–µ–º —Å–µ—Ä–≤–µ—Ä–µ.
–ß—Ç–æ–±—ã –≤—Å—ë —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ –Ω—É–∂–Ω–æ:
1. Create LVM
2. IPTABLES rules
3. USER for DB on DB Server
4. Dockerfile
4.1 app05.conf

...Step1...Create LVM / install docker / mount to LVM / create project folder

apt install fdisk
fdisk /dev/sdb
pvcreate /dev/sdb1
vgcreate DOCKER /dev/sdb1
lvcreatea -n system -L 9G DOCKER
mkfs.ext4 /dev/DOCKER/system
mount /dev/DOCKER/system /var/lib/docker
echo '/dev/DOCKER/system /var/lib/docker/ ext4 defaults 2 0' | tee -a /etc/fstab
cd /var/lib/docker
mkdir -p projects
cd projects
mkdir -p docker-laravel-2
cd docker-laravel-2

...Step2...On 93.8 add new user laravel-user-app05

mysql
	CREATE USER 'laravel_user_app05'@'10.100.93.6' IDENTIFIED BY '1323';
	GRANT ALL PRIVILEGES ON laravel.* TO 'laravel_user_app05'@'10.100.93.6';
	FLUSH PRIVILEGES;
	EXIT;

...Test connection from 93.6 to 93.8 mysql
mysql -h 10.100.93.8 -u laravel_user_app05 -p
!!!GOOD!!!
...Step3...Dockerfile && app05.conf > build, run

pwd = /var/lib/docker/projects/docker-laravel-2
nano Dockerfile #see Dockerfile_WorkVersion
nano app02.conf #see app05_conf.txt
docker build -t laravel-app-005 .
docker run -d -p 7080:80 <image_tag>
<!#/bin/bash: Optional Step>
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É –º–µ–Ω—è –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
### 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ network in containers
docker exec -it <container:id> bash
apt update ==> work 
#–æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ IPTABLES –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö –ø–æ–¥ Laravel (app01-app02-app03) –ø–æ–¥—Ö–æ–¥–∏—Ç. 
–ê —Ç—É —Å–∞–º—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å —á—Ç–æ —è –≤—Å—Ç—Ä–µ—á–∞–ª –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ç–µ—Å—Ç–µ –±—ã–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Proxy. 
–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –≤ IPTABLES - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.

...Step4... IPTABLES rule on port 7080
iptables -A INPUT -p tcp -m multiport --dports 7080 -j ACCEPT

Result:
1. Accessing 10.100.93.6:7080 Laravel Up and Running
2. stoping mysql = laravel down (this is good)