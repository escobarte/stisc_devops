DNS (Domain Name System)
Что это: DNS — это система, это целая распределенная база данных и протокол, который позволяет нам использовать человекочитаемые доменные имена (например, google.com) вместо сложных числовых IP-адресов (например, 172.217.160.142) для доступа к ресурсам в Интернете.
Как это работает: Это как телефонная книга Интернета. Когда вы вводите доменное имя в браузере, ваш компьютер использует DNS для поиска соответствующего IP-адреса.
Составные части: DNS включает в себя множество компонентов:
DNS-серверы: Компьютеры, на которых работает программное обеспечение DNS (как BIND), хранящие DNS-записи.
DNS-записи (Resource Records): Это элементы данных в DNS, такие как A-записи (имя -> IPv4), AAAA-записи (имя -> IPv6), MX-записи (почтовые серверы), CNAME-записи (псевдонимы) и, конечно, NS-записи.
Протокол: Правила, по которым DNS-серверы и клиенты общаются.
Иерархия: Глобальная распределенная структура (корневые серверы, TLD-серверы, авторитетные серверы).
Таким образом, DNS — это обширная, глобальная система, которая обеспечивает преобразование доменных имен в IP-адреса и обратно.

NS (Name Server) и NS-запись
NS (Name Server): Это тип DNS-сервера. Это сервер, который является авторитетным для одной или нескольких DNS-зон. Авторитетный DNS-сервер означает, что он хранит оригинальные, полные и актуальные DNS-записи для определенных доменов или поддоменов (зон).

Например, когда вы регистрируете домен example.com, вы должны указать регистратору домена как минимум два NS-сервера (например, ns1.example.com и ns2.example.com). Эти серверы будут отвечать на запросы о том, куда направлять трафик для вашего домена (где находятся ваш веб-сервер, почтовый сервер и т.д.).
Термин "NS-сервер" или "неймсервер" иногда используется как синоним "DNS-сервера", но более точно NS-сервер — это роль или функция, которую DNS-сервер выполняет (быть авторитетным источником информации для домена).
NS-запись (Name Server Record): Это конкретный тип записи в DNS. Она используется для указания того, какие NS-серверы являются авторитетными для определенной зоны или подзоны.

Вы видели пример в своем файле зоны:
DNS Zone file

@       IN      NS      lab.local.
Эта запись говорит, что lab.local. является авторитетным сервером имен для зоны lab.local..
NS-записи критически важны для делегирования. Они позволяют разделить управление доменным пространством: корневые DNS-серверы знают, какой TLD-сервер отвечает за .com, TLD-серверы .com знают, какие NS-серверы отвечают за google.com, и так далее.
Аналогия:
Представьте, что DNS — это вся телефонная справочная служба (включая всех операторов, базы данных, правила звонков и т.д.).

Тогда NS-сервер — это конкретный оператор в этой справочной службе, который специализируется на ответах для определенного города или региона (т.е. для вашей DNS-зоны).

А NS-запись — это запись в главной телефонной книге, которая говорит: "Чтобы узнать номер телефона кого-то из города N, позвоните оператору X."

Кратко:
DNS: Общая система разрешения доменных имен.
NS (Name Server): Это тип DNS-сервера, который авторитетно хранит и обслуживает DNS-записи для одной или нескольких зон.
NS-запись: Это запись в DNS, которая указывает, какой NS-сервер отвечает за данную зону.
Таким образом, NS-сервер — это компонент системы DNS, а NS-запись — это элемент данных в этой системе, который указывает на NS-серверы.

Итак, у вас есть такая схема:

DNS-сервер: 10.100.93.8 (BIND9), который хостит зону lab.local..
A-запись: app.lab.local. -> 185.108.183.205 (внешний публичный VIP).
VIP: 185.108.183.205 транслируется (DNAT) или маршрутизируется на ваш внутренний VIP 10.100.93.2.
Nginx-серверы: Prx01 (master) и Prx02 (slave) с VIP 10.100.93.2 между ними, работающие по failover (скорее всего, с помощью Keepalived или аналогичного ПО).
Ваш вопрос: Стоит ли мне ставить NS Servers на Proxy serverah (Prx01 и Prx02)?

Короткий ответ: Нет, в вашей текущей схеме это, скорее всего, не имеет смысла и даже может усложнить систему без видимых преимуществ.

Подробное объяснение:

Почему, вероятно, не стоит:
Разделение ролей (Separation of Concerns):

DNS-серверы отвечают за разрешение имен.
Nginx-серверы (proxy) отвечают за балансировку нагрузки, терминирование SSL и проксирование HTTP/HTTPS трафика.
Смешивание этих ролей на одних и тех же серверах увеличивает сложность, потенциальные точки отказа и сложность устранения неполадок. Если Nginx-серверы перегружены или имеют проблемы, это может негативно сказаться на работе DNS-сервера, и наоборот.
Надежность и доступность DNS:

Ваш существующий DNS-сервер (10.100.93.8) уже является точкой отказа для DNS. Если этот сервер упадет, ничто не сможет разрешить app.lab.local. во внешний IP.
Добавление DNS на прокси-серверы не улучшит внешнюю доступность вашего DNS, если вы не настроите их как публичные NS-серверы для lab.local. и не обновите NS-записи у вашего доменного регистратора. Но тогда у вас будет проблема с "круговой" зависимостью (circular dependency) или "глупой" зависимостью (glue records) для lab.local. если lab.local. сам является NS-сервером.
В случае failover между Prx01 и Prx02, только один из них активен в любой момент времени с VIP 10.100.93.2. Если вы настроите DNS на этом VIP, то при переключении VIP DNS-служба тоже переключится. Это может быть похоже на некоторую избыточность, но не для авторитетных внешних DNS-серверов.
Внутреннее использование DNS:

Если lab.local. — это только внутренний домен, и ваш DNS-сервер 10.100.93.8 используется только внутри вашей сети (например, клиенты в вашей сети используют его для разрешения имен), то нет необходимости делать прокси-серверы DNS-серверами.
Безопасность:

Запуск большего количества служб на сервере увеличивает поверхность атаки. Прокси-серверы, которые смотрят в Интернет, уже являются критическими точками и должны быть максимально защищены. Добавление DNS-службы может привнести дополнительные уязвимости.
Когда это могло бы иметь смысл (но не в вашем случае):
Кэширующий DNS-сервер: Если бы прокси-серверы или другие внутренние сервисы на этих машинах часто делали DNS-запросы и вы хотели бы иметь локальный кэширующий резолвер для ускорения, можно было бы поставить кэширующий DNS (например, unbound или dnsmasq), а не авторитетный. Но это другая роль.
Действительно высокодоступный внешний DNS: Если бы сам DNS-сервис был критически важен для внешнего доступа и требовал максимальной отказоустойчивости, тогда вы бы использовали несколько выделенных DNS-серверов в разных ЦОДах, а не на тех же машинах, что и Nginx.
Очень маленькая инфраструктура: В некоторых очень маленьких настройках, где каждый сервер выполняет множество функций из-за ограниченных ресурсов, могут смешивать роли, но это не является лучшей практикой для продакшена.
Рекомендации:
Оставьте DNS-сервер 10.100.93.8 как есть, как ваш авторитетный DNS для lab.local..
Убедитесь, что ваш DNS-сервер 10.100.93.8 сам по себе надежен:
Если это критично, рассмотрите настройку вторичного (slave) DNS-сервера (например, на другой машине) для lab.local.. Это обеспечит отказоустойчивость для самого DNS-сервиса. В этом случае, вы бы прописали два NS-сервера у регистратора домена.
В файле зоны SOA-запись должна указывать на первичный DNS-сервер (например, ns1.lab.local.), а NS-записи должны перечислять все авторитетные NS-серверы (имеющие A-записи, чтобы их можно было разрешить).
Вывод: Исходя из вашей описанной схемы, размещение NS-серверов на прокси-серверах Nginx не принесет значимых преимуществ и добавит ненужную сложность. Сосредоточьтесь на обеспечении надежности вашего основного DNS-сервера 10.100.93.8.
Что можно практиковать и изучать, размещая NS-серверы на Proxy-серверах:
Настройка нескольких авторитетных NS-серверов (Master-Slave):

Концепция: Как DNS-серверы взаимодействуют для обеспечения избыточности и актуальности данных.
Практика:
Настройте BIND9 на Prx01 как Primary (Master) DNS-сервер для зоны lab.local..
Настройте BIND9 на Prx02 как Secondary (Slave) DNS-сервер для зоны lab.local..
Изучите концепции SOA-записей (Serial, Refresh, Retry, Expire) и как они влияют на синхронизацию зоны.
Настройте уведомления (NOTIFY) на Master и запросы зоны (AXFR/IXFR) на Slave.
Убедитесь, что при изменении серийного номера на Prx01, Prx02 автоматически обновляет зону.
DNS и High Availability/Failover (Связь с VIP):

Концепция: Как сделать DNS-сервис высокодоступным с использованием VIP (виртуального IP-адреса).
Практика:
Если ваш VIP (10.100.93.2) может плавать между Prx01 и Prx02 благодаря Keepalived, вы можете попробовать настроить DNS-серверы так, чтобы они слушали на этом VIP-адресе.
Это может быть сложнее, чем кажется, так как Keepalived управляет VIP на сетевом уровне, а BIND слушает на определенных IP-адресах. Вам нужно будет убедиться, что BIND настроен слушать на всех доступных интерфейсах или конкретно на VIP-адресе, когда он активен на сервере.
Проверьте, как ведет себя DNS-сервис при переключении VIP.
Управление зонами и файлами конфигурации:

Концепция: Организация файлов зон и конфигурации в условиях распределенных ролей.
Практика:
Продолжайте использовать /mnt/dns/bind для всех ваших файлов конфигурации и зон.
Убедитесь, что на обоих прокси-серверах (Prx01 и Prx02) есть доступ к этим файлам (это может потребовать настройки синхронизации, если /mnt/dns не общая для обоих). В случае Master/Slave, Slave будет получать зоны по протоколу DNS, а не из файловой системы.
Разрешение имен внутри и снаружи:

Концепция: Отличие внешнего (public) DNS от внутреннего (private) DNS.
Практика:
Ваш DNS-сервер 10.100.93.8 в данный момент обслуживает внешний IP 185.108.183.205. Если вы хотите, чтобы app.lab.local. разрешался во внутренний IP (10.100.93.2) для клиентов внутри вашей сети, вы можете настроить DNS-view в BIND.
Это позволит вашему DNS-серверу 10.100.93.8 отдавать 185.108.183.205 для внешних запросов и 10.100.93.2 для внутренних запросов. Это очень ценная практика для понимания "раздельного горизонта DNS" (split-horizon DNS).
Конфликты портов и сетевые интерфейсы:

Концепция: Службы могут конфликтовать за порты, и как BIND слушает на разных IP-адресах.
Практика: Nginx слушает на портах 80/443. BIND слушает на порту 53 (TCP/UDP). Эти порты не конфликтуют. Но вы можете поэкспериментировать с директивой listen-on в BIND, чтобы он слушал только на определенных IP-адресах (10.100.93.2 когда активен, или 10.100.93.8).
Как подойти к реализации (для обучения):
Начните с DNS Master/Slave: Это фундаментальный элемент высокодоступного DNS.

Prx01: Настройте как Master для lab.local..
Prx02: Настройте как Slave для lab.local..
Проверьте синхронизацию зон.
Попробуйте переместить NS-записи:

Измените NS-записи в родительской зоне (если у вас есть контроль над ней, или имитируйте это) или в файле зоны lab.local. так, чтобы они указывали на Prx01 и Prx02 (или на их VIP).
Это заставит вас столкнуться с проблемой "glue records", если имя NS-сервера находится в той же зоне, которую он обслуживает (например, ns1.lab.local. обслуживает lab.local.).
Важно: Вы не сможете реально использовать 10.100.93.2 как публичный NS-сервер, так как это внутренний VIP. Если вы хотите практиковать публичные NS-серверы, вам понадобятся публичные IP-адреса для Prx01 и Prx02, которые вы будете использовать в качестве NS-серверов у вашего доменного регистратора.
Поэкспериментируйте с DNS Views (Split-Horizon DNS):

Это позволит вам подавать разные ответы (внутренний IP 10.100.93.2 или внешний IP 185.108.183.205) в зависимости от источника запроса. Очень полезный навык.
Таким образом, для практики - это отличный повод углубиться в устройство DNS, Keepalived и их взаимодействия. Только помните, что это шаги для обучения, а не для продакшн-окружения, где роли обычно строго разделены.
